		SOLUTION.TXT
		------------
		Soham Nandy 
		CS20b046


/*

Most of the text in this file comprises of system outputs which has been redirected to this file
There might be indentation errors ahead!

*/


Q1>


commands -->
g++ -std=c++17 -O0 q1.cpp -o astO0.out
g++ -std=c++17 -O3 q1.cpp -o astO3.out
------------------------------------------
 ls -l >> solutions.txt
-----------------------------------------

-rwxr-xr-x  1 soham  staff  52872 Jan 18 15:25 astO0.out
-rwxr-xr-x  1 soham  staff  50632 Jan 18 15:25 astO3.out
-rw-r--r--  1 soham  staff    534 Jan 18 15:19 q1.cpp
-rw-r--r--  1 soham  staff      0 Jan 18 15:34 solutions.txt

-------------- outputs of O0.out and O1.out-----------

for i in {1..10} do; ./astO0.out >> solutions.txt done;
--------------------------------------------------------

Runtimes with O0

0
758364
0
457433
0
451990
0
450419
0
452661
0
453795
0
453767
0
446462
0
451048
0
451340


Runtimes with O3
0
451748
0
359566
0
350233
0
348510
0
351474
0
351991
0
349608
0
352503
0
345283
0
351960
0
346015
0
366094


Q2> After printing out the value --> the runtimes with


for i in {1..10} do; ./astout0.out >> solutions.txt done;
-------------------------------------------------
O0-->

0
660967
0
452134
0
450967
0
452277
0
453408
0
454587
0
458474
0
457804
0
453023
0
459568
0
449932
0
343977


without the cout statement
458307
441304
435320
441369
437914
441153
441810
438571
437645
437143
442639



O3 -->

for i in {1..10} do; ./astout3.out >> solutions.txt done;
-----------------------------------------------------
0
347604
0
353294
0
348618
0
348316
0
348637
0
355066
0
353934
0
351299
0
350955
0
348584


Sizes of the files -->
asto0 , asto3 --> without the print statements
astout0, astout3 --> with the print statements


total 432
-rwxr-xr-x  1 soham  staff  52872 Jan 18 15:45 asto0.out
-rwxr-xr-x  1 soham  staff  50632 Jan 18 15:46 asto3.out
-rwxr-xr-x  1 soham  staff  52872 Jan 18 15:59 astout0.out
-rwxr-xr-x  1 soham  staff  50632 Jan 18 15:59 astout3.out
-rw-r--r--  1 soham  staff    540 Jan 18 15:58 q1.cpp
-rw-r--r--  1 soham  staff    798 Jan 18 16:00 solutions.txt



Q3 --> for normal i j --> runtimes would be
0
660967
0
452134
0
450967
0
452277
0
453408
0
454587
0
458474
0
457804
0
453023
0
459568
0
449932
0
343977

when i and j are swqpped --> runtimes are
----------------------------------------

0
1530960
0
1400253
0
1729400
0
1374757
0
1373665
0
1373747
0
1344423
0
1360600
0
1758094
0
1347225
0
1365067



Q4-->
----------------------------------------
here I have generated the program for taking input of 10000 nums to an array and some random n number of numbers to a linked list

A seperate python program generates the input file every time and this input is fed to the cpp program and the output is noted in the file

---------------------------------
COMMANDS -->
for in in {1..10} do; python3 gennum.py > input.txt && ./exec <input.txt >> solutions.txt done;
-------------------------------------------------------------------------------------------


 array time --> 17024
linked list time with n = 3135-->  5598
 ---------------------------------------------------------------------
 array time --> 16848
linked list time with n = 7060-->  12270
 ---------------------------------------------------------------------
 array time --> 16650
linked list time with n = 9449-->  16275
 ---------------------------------------------------------------------
 array time --> 16859
linked list time with n = 7979-->  13634
 ---------------------------------------------------------------------
 array time --> 16584
linked list time with n = 6379-->  10959
 ---------------------------------------------------------------------
 array time --> 17005
linked list time with n = 5630-->  9525
 ---------------------------------------------------------------------
 array time --> 16921
linked list time with n = 8398-->  14497
 ---------------------------------------------------------------------
 array time --> 17600
linked list time with n = 2748-->  4675
 ---------------------------------------------------------------------
 array time --> 16710
linked list time with n = 1659-->  2829
 ---------------------------------------------------------------------
 array time --> 16622
linked list time with n = 5978-->  10157
 ---------------------------------------------------------------------
 array time --> 16922
linked list time with n = 6630-->  11401
 ---------------------------------------------------------------------


 Q5 --> a standard O(n^3) algorithm for matrix multiplication 

 /*
here too I have generated a python script to print a random nxn matrix and this input is being fed into the cpp program as an input

COMMANDS-->
----------------------------------------------------------------------------------------------
for i in {1..10} do; python3 genmat.py > input1.txt && ./compiled < input1.txt done;
 */


WITHOUT USING ANY OPTIMIZATION LEVELS

for n = 93 --> Time - 0.025712 s
for n = 82 --> Time - 0.019761 s
for n = 10 --> Time - 0.000325 s
for n = 100 --> Time - 0.030386 s
for n = 33 --> Time - 0.002983 s
for n = 98 --> Time - 0.031043 s
for n = 32 --> Time - 0.002872 s
for n = 45 --> Time - 0.005665 s
for n = 55 --> Time - 0.008574 s
for n = 74 --> Time - 0.015853 s
for n = 23 --> Time - 0.001532 s
for n = 44 --> Time - 0.005260 s
for n = 82 --> Time - 0.019782 s
for n = 90 --> Time - 0.024027 s
for n = 8 --> Time - 0.000232 s
for n = 53 --> Time - 0.009307 s
for n = 95 --> Time - 0.026794 s
for n = 70 --> Time - 0.014183 s
for n = 70 --> Time - 0.014368 s
for n = 25 --> Time - 0.002074 s
for n = 87 --> Time - 0.033249 s
for n = 9 --> Time - 0.000264 s
for n = 75 --> Time - 0.016375 s
for n = 43 --> Time - 0.005056 s
for n = 53 --> Time - 0.007870 s
for n = 67 --> Time - 0.012932 s
for n = 44 --> Time - 0.005834 s
for n = 63 --> Time - 0.011370 s
for n = 59 --> Time - 0.009882 s
for n = 81 --> Time - 0.019514 s
for n = 97 --> Time - 0.028938 s


USING O0 OPTIMIZATION LEVELS


for n = 15 --> Time - 0.000673 s
for n = 41 --> Time - 0.004540 s
for n = 57 --> Time - 0.009375 s
for n = 90 --> Time - 0.023958 s
for n = 5 --> Time - 0.000128 s
for n = 98 --> Time - 0.028726 s
for n = 65 --> Time - 0.012315 s
for n = 89 --> Time - 0.023691 s
for n = 21 --> Time - 0.001593 s
for n = 69 --> Time - 0.013875 s
for n = 29 --> Time - 0.002297 s
for n = 55 --> Time - 0.008676 s
for n = 12 --> Time - 0.000447 s
for n = 24 --> Time - 0.001545 s
for n = 90 --> Time - 0.024691 s
for n = 11 --> Time - 0.000398 s
for n = 100 --> Time - 0.030705 s
for n = 25 --> Time - 0.001828 s
for n = 61 --> Time - 0.010641 s
for n = 13 --> Time - 0.000583 s
for n = 85 --> Time - 0.021428 s
for n = 97 --> Time - 0.029142 s
for n = 25 --> Time - 0.001723 s
for n = 10 --> Time - 0.000313 s
for n = 19 --> Time - 0.001025 s
for n = 30 --> Time - 0.002566 s
for n = 6 --> Time - 0.000153 s
for n = 56 --> Time - 0.009497 s
for n = 92 --> Time - 0.026039 s
for n = 90 --> Time - 0.027519 s
for n = 71 --> Time - 0.015520 s

USING O3 OPTIMIZATION

for n = 32 --> Time - 0.002519 s
for n = 18 --> Time - 0.000850 s
for n = 77 --> Time - 0.014746 s
for n = 90 --> Time - 0.020433 s
for n = 62 --> Time - 0.010012 s
for n = 37 --> Time - 0.003576 s
for n = 73 --> Time - 0.013344 s
for n = 25 --> Time - 0.001605 s
for n = 54 --> Time - 0.007432 s
for n = 51 --> Time - 0.006472 s
for n = 14 --> Time - 0.000524 s
for n = 66 --> Time - 0.011489 s
for n = 81 --> Time - 0.018210 s
for n = 40 --> Time - 0.004068 s
for n = 88 --> Time - 0.019328 s
for n = 28 --> Time - 0.002023 s
for n = 91 --> Time - 0.020787 s
for n = 85 --> Time - 0.018058 s
for n = 98 --> Time - 0.023765 s
for n = 30 --> Time - 0.002291 s
for n = 38 --> Time - 0.003582 s
for n = 94 --> Time - 0.021935 s
for n = 8 --> Time - 0.000264 s
for n = 41 --> Time - 0.004257 s
for n = 54 --> Time - 0.007227 s
for n = 79 --> Time - 0.015884 s
for n = 33 --> Time - 0.003453 s
for n = 17 --> Time - 0.000776 s
for n = 27 --> Time - 0.001896 s
for n = 86 --> Time - 0.018623 s
for n = 70 --> Time - 0.012470 s




/*
Improvements of this code-->
Maybe by tweaking i,j,k values some increment or decrement in time complexity can be seen

*/
